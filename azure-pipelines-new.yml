# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker
# MARCIO DE LIMA - Case 1 - EngML

trigger:
- main

resources:
- repo: self

variables:

  dockerRegistryServiceConnection: 'acrCaseRestMarcio'
  imageRepository: 'backend.model'
  containerRegistry: 'acrcaserestmarcio.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  # Agent VM image name
  vmImageName: 'ubuntu-latest'
  imagePullSecret: 'acrcaserestmarcio-auth'

stages:
- stage: Build
  displayName: Build imagem
  jobs:
  - job: Print_Parameters
    displayName: Print Parameters
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          echo 'Meus Parametros:'
          echo 'Service Connection: ' $(dockerRegistryServiceConnection)
          echo 'Image Repository: ' $(imageRepository)
          echo 'Azure container Registry: ' $(containerRegistry)
          echo 'Dockerfile Path: ' $(dockerfilePath)
          echo 'Build ID: ' $(tag)
          echo 'VM Image Name: ' $(vmImageName)
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest
    - upload: deployment
      artifact: deployment
- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'marciodelimacase1santanderengmlbackend.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/deployment/backend.yaml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)
